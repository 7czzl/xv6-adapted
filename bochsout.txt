00000000000i[     ] Bochs x86 Emulator 2.6.1
00000000000i[     ]   Built from SVN snapshot on April 7, 2013
00000000000i[     ] Compiled on Mar  5 2018 at 08:45:52
00000000000i[     ] System configuration
00000000000i[     ]   processors: 2 (cores=1, HT threads=1)
00000000000i[     ]   A20 line support: yes
00000000000i[     ] IPS is set to 10000000
00000000000i[     ] CPU configuration
00000000000i[     ]   level: 6
00000000000i[     ]   SMP support: yes, quantum=16
00000000000i[     ]   APIC support: xapic
00000000000i[     ]   FPU support: yes
00000000000i[     ]   MMX support: yes
00000000000i[     ]   3dnow! support: no
00000000000i[     ]   SEP support: yes
00000000000i[     ]   SSE support: sse2
00000000000i[     ]   XSAVE support: no 
00000000000i[     ]   AES support: no
00000000000i[     ]   MOVBE support: no
00000000000i[     ]   ADX support: no
00000000000i[     ]   x86-64 support: no
00000000000i[     ]   MWAIT support: yes
00000000000i[     ] Optimization configuration
00000000000i[     ]   RepeatSpeedups support: no
00000000000i[     ]   Fast function calls: no
00000000000i[     ]   Handlers Chaining speedups: no
00000000000i[     ] Devices configuration
00000000000i[     ]   NE2000 support: no
00000000000i[     ]   PCI support: yes, enabled=yes
00000000000i[     ]   SB16 support: no
00000000000i[     ]   USB support: no
00000000000i[     ]   VGA extension support: vbe
00000000000i[MEM0 ] allocated memory at 0x7fd471351010. after alignment, vector=0x7fd471352000
00000000000i[MEM0 ] 256.00MB
00000000000i[MEM0 ] mem block size = 0x00100000, blocks=256
00000000000i[MEM0 ] rom at 0xfffe0000/131072 ('/usr/local/share/bochs/BIOS-bochs-latest')
00000000000i[     ] init_dev of 'pci' plugin device by virtual method
00000000000i[DEV  ] i440FX PMC present at device 0, function 0
00000000000i[     ] init_dev of 'pci2isa' plugin device by virtual method
00000000000i[DEV  ] PIIX3 PCI-to-ISA bridge present at device 1, function 0
00000000000i[     ] init_dev of 'cmos' plugin device by virtual method
00000000000i[CMOS ] Using local time for initial clock
00000000000i[CMOS ] Setting initial clock to: Mon Mar  5 08:48:23 2018 (time0=1520210903)
00000000000i[     ] init_dev of 'dma' plugin device by virtual method
00000000000i[DMA  ] channel 4 used by cascade
00000000000i[     ] init_dev of 'pic' plugin device by virtual method
00000000000i[     ] init_dev of 'pit' plugin device by virtual method
00000000000i[     ] init_dev of 'floppy' plugin device by virtual method
00000000000i[DMA  ] channel 2 used by Floppy Drive
00000000000i[FDD  ] tried to open '/dev/fd0' read/write: No such file or directory
00000000000i[FDD  ] tried to open '/dev/fd0' read only: No such file or directory
00000000000i[FDD  ] tried to open 'b.img' read/write: No such file or directory
00000000000i[FDD  ] tried to open 'b.img' read only: No such file or directory
00000000000i[     ] init_dev of 'vga' plugin device by virtual method
00000000000i[MEM0 ] Register memory access handlers: 0x0000000a0000 - 0x0000000bffff
00000000000i[VGA  ] interval=200000
00000000000i[XGUI ] test_alloc_colors: 16 colors available out of 16 colors tried
00000000000i[XGUI ] font 8 wide x 16 high, display depth = 24
00000000000i[MEM0 ] rom at 0xc0000/41472 ('/usr/local/share/bochs/VGABIOS-lgpl-latest')
00000000000i[     ] init_dev of 'acpi' plugin device by virtual method
00000000000i[DEV  ] ACPI Controller present at device 1, function 3
00000000000i[     ] init_dev of 'ioapic' plugin device by virtual method
00000000000i[IOAP ] initializing I/O APIC
00000000000i[MEM0 ] Register memory access handlers: 0x0000fec00000 - 0x0000fec00fff
00000000000i[IOAP ] IOAPIC enabled (base address = 0xfec00000)
00000000000i[     ] init_dev of 'keyboard' plugin device by virtual method
00000000000i[KBD  ] will paste characters every 400 keyboard ticks
00000000000i[     ] init_dev of 'harddrv' plugin device by virtual method
00000000000i[HD   ] HD on ata0-0: 'xv6.img', 'flat' mode
00000000000i[IMG  ] hd_size: 5120000
00000000000i[HD   ] ata0-0: using specified geometry: CHS=100/10/10
00000000000i[HD   ] HD on ata0-1: 'fs.img', 'flat' mode
00000000000i[IMG  ] hd_size: 512000
00000000000i[HD   ] ata0-1: using specified geometry: CHS=1000/1/1
00000000000i[HD   ] translation on ata0-0 set to 'none'
00000000000i[HD   ] translation on ata0-1 set to 'none'
00000000000i[HD   ] Using boot sequence disk, none, none
00000000000i[HD   ] Floppy boot signature check is enabled
00000000000i[     ] init_dev of 'pci_ide' plugin device by virtual method
00000000000i[DEV  ] PIIX3 PCI IDE controller present at device 1, function 1
00000000000i[     ] init_dev of 'unmapped' plugin device by virtual method
00000000000i[     ] init_dev of 'biosdev' plugin device by virtual method
00000000000i[     ] init_dev of 'speaker' plugin device by virtual method
00000000000i[     ] init_dev of 'extfpuirq' plugin device by virtual method
00000000000i[     ] init_dev of 'parallel' plugin device by virtual method
00000000000i[PAR  ] parallel port 1 at 0x0378 irq 7
00000000000i[     ] init_dev of 'serial' plugin device by virtual method
00000000000i[SER  ] com1 at 0x03f8 irq 4
00000000000i[     ] init_dev of 'iodebug' plugin device by virtual method
00000000000i[     ] register state of 'pci' plugin device by virtual method
00000000000i[     ] register state of 'pci2isa' plugin device by virtual method
00000000000i[     ] register state of 'cmos' plugin device by virtual method
00000000000i[     ] register state of 'dma' plugin device by virtual method
00000000000i[     ] register state of 'pic' plugin device by virtual method
00000000000i[     ] register state of 'pit' plugin device by virtual method
00000000000i[     ] register state of 'floppy' plugin device by virtual method
00000000000i[     ] register state of 'vga' plugin device by virtual method
00000000000i[     ] register state of 'unmapped' plugin device by virtual method
00000000000i[     ] register state of 'biosdev' plugin device by virtual method
00000000000i[     ] register state of 'speaker' plugin device by virtual method
00000000000i[     ] register state of 'extfpuirq' plugin device by virtual method
00000000000i[     ] register state of 'parallel' plugin device by virtual method
00000000000i[     ] register state of 'serial' plugin device by virtual method
00000000000i[     ] register state of 'iodebug' plugin device by virtual method
00000000000i[     ] register state of 'acpi' plugin device by virtual method
00000000000i[     ] register state of 'ioapic' plugin device by virtual method
00000000000i[     ] register state of 'keyboard' plugin device by virtual method
00000000000i[     ] register state of 'harddrv' plugin device by virtual method
00000000000i[     ] register state of 'pci_ide' plugin device by virtual method
00000000000i[SYS  ] bx_pc_system_c::Reset(HARDWARE) called
00000000000i[CPU0 ] cpu hardware reset
00000000000i[APIC0] allocate APIC id=0 (MMIO enabled) to 0x0000fee00000
00000000000i[CPU0 ] CPU[0] is the bootstrap processor
00000000000i[CPU0 ] CPUID[0x00000000]: 00000005 756e6547 6c65746e 49656e69
00000000000i[CPU0 ] CPUID[0x00000001]: 00000633 00010800 00000008 1fcbfbff
00000000000i[CPU0 ] CPUID[0x00000002]: 00410601 00000000 00000000 00000000
00000000000i[CPU0 ] CPUID[0x00000003]: 00000000 00000000 00000000 00000000
00000000000i[CPU0 ] CPUID[0x00000004]: 00000000 00000000 00000000 00000000
00000000000i[CPU0 ] CPUID[0x00000005]: 00000040 00000040 00000003 00000020
00000000000i[CPU0 ] CPUID[0x80000000]: 80000008 00000000 00000000 00000000
00000000000i[CPU0 ] CPUID[0x80000001]: 00000000 00000000 00000000 00000000
00000000000i[CPU0 ] CPUID[0x80000002]: 20202020 20202020 20202020 6e492020
00000000000i[CPU0 ] CPUID[0x80000003]: 286c6574 50202952 69746e65 52286d75
00000000000i[CPU0 ] CPUID[0x80000004]: 20342029 20555043 20202020 00202020
00000000000i[CPU0 ] CPUID[0x80000005]: 01ff01ff 01ff01ff 40020140 40020140
00000000000i[CPU0 ] CPUID[0x80000006]: 00000000 42004200 02008140 00000000
00000000000i[CPU0 ] CPUID[0x80000007]: 00000000 00000000 00000000 00000000
00000000000i[CPU0 ] CPUID[0x80000008]: 00002028 00000000 00000000 00000000
00000000000i[CPU1 ] cpu hardware reset
00000000000i[APIC1] allocate APIC id=1 (MMIO enabled) to 0x0000fee00000
00000000000i[CPU1 ] CPU[1] is an application processor. Halting until SIPI.
00000000000i[CPU1 ] CPUID[0x00000000]: 00000005 756e6547 6c65746e 49656e69
00000000000i[CPU1 ] CPUID[0x00000001]: 00000633 01010800 00000008 1fcbfbff
00000000000i[CPU1 ] CPUID[0x00000002]: 00410601 00000000 00000000 00000000
00000000000i[CPU1 ] CPUID[0x00000003]: 00000000 00000000 00000000 00000000
00000000000i[CPU1 ] CPUID[0x00000004]: 00000000 00000000 00000000 00000000
00000000000i[CPU1 ] CPUID[0x00000005]: 00000040 00000040 00000003 00000020
00000000000i[CPU1 ] CPUID[0x80000000]: 80000008 00000000 00000000 00000000
00000000000i[CPU1 ] CPUID[0x80000001]: 00000000 00000000 00000000 00000000
00000000000i[CPU1 ] CPUID[0x80000002]: 20202020 20202020 20202020 6e492020
00000000000i[CPU1 ] CPUID[0x80000003]: 286c6574 50202952 69746e65 52286d75
00000000000i[CPU1 ] CPUID[0x80000004]: 20342029 20555043 20202020 00202020
00000000000i[CPU1 ] CPUID[0x80000005]: 01ff01ff 01ff01ff 40020140 40020140
00000000000i[CPU1 ] CPUID[0x80000006]: 00000000 42004200 02008140 00000000
00000000000i[CPU1 ] CPUID[0x80000007]: 00000000 00000000 00000000 00000000
00000000000i[CPU1 ] CPUID[0x80000008]: 00002028 00000000 00000000 00000000
00000000000i[     ] reset of 'pci' plugin device by virtual method
00000000000i[     ] reset of 'pci2isa' plugin device by virtual method
00000000000i[     ] reset of 'cmos' plugin device by virtual method
00000000000i[     ] reset of 'dma' plugin device by virtual method
00000000000i[     ] reset of 'pic' plugin device by virtual method
00000000000i[     ] reset of 'pit' plugin device by virtual method
00000000000i[     ] reset of 'floppy' plugin device by virtual method
00000000000i[     ] reset of 'vga' plugin device by virtual method
00000000000i[     ] reset of 'acpi' plugin device by virtual method
00000000000i[     ] reset of 'ioapic' plugin device by virtual method
00000000000i[     ] reset of 'keyboard' plugin device by virtual method
00000000000i[     ] reset of 'harddrv' plugin device by virtual method
00000000000i[     ] reset of 'pci_ide' plugin device by virtual method
00000000000i[     ] reset of 'unmapped' plugin device by virtual method
00000000000i[     ] reset of 'biosdev' plugin device by virtual method
00000000000i[     ] reset of 'speaker' plugin device by virtual method
00000000000e[SPEAK] Failed to open /dev/console: Permission denied
00000000000e[SPEAK] Deactivating beep on console
00000000000i[     ] reset of 'extfpuirq' plugin device by virtual method
00000000000i[     ] reset of 'parallel' plugin device by virtual method
00000000000i[     ] reset of 'serial' plugin device by virtual method
00000000000i[     ] reset of 'iodebug' plugin device by virtual method
00000000000i[XGUI ] Mouse capture off
00000000000i[     ] set SIGINT handler to bx_debug_ctrlc_handler
00000000000i[XGUI ] Mouse capture off
00000000025i[MEM0 ] allocate_block: block=0x0 used 0x1 of 0x100
00000004660i[BIOS ] $Revision: 11545 $ $Date: 2012-11-11 09:11:17 +0100 (So, 11. Nov 2012) $
00000320040i[KBD  ] reset-disable command received
00000325815i[BIOS ] Starting rombios32
00000326250i[BIOS ] Shutdown flag 0
00000326850i[BIOS ] ram_size=0x10000000
00000327295i[BIOS ] ram_end=256MB
00000327795i[APIC1] Deliver INIT IPI
00000327800i[APIC1] Deliver Start Up IPI
00000327800i[CPU1 ] CPU 1 started up at 9F00:00000000 by APIC
00000327920i[CPU1 ] WARNING: HLT instruction with IF=0!
00000427175i[BIOS ] Found 2 cpu(s)
00000441365i[BIOS ] bios_table_addr: 0x000fa448 end=0x000fcc00
00000769160i[PCI  ] i440FX PMC write to PAM register 59 (TLB Flush)
00001097085i[P2I  ] PCI IRQ routing: PIRQA# set to 0x0b
00001097105i[P2I  ] PCI IRQ routing: PIRQB# set to 0x09
00001097125i[P2I  ] PCI IRQ routing: PIRQC# set to 0x0b
00001097145i[P2I  ] PCI IRQ routing: PIRQD# set to 0x09
00001097155i[P2I  ] write: ELCR2 = 0x0a
00001097920i[BIOS ] PIIX3/PIIX4 init: elcr=00 0a
00001105595i[BIOS ] PCI: bus=0 devfn=0x00: vendor_id=0x8086 device_id=0x1237 class=0x0600
00001107865i[BIOS ] PCI: bus=0 devfn=0x08: vendor_id=0x8086 device_id=0x7000 class=0x0601
00001109970i[BIOS ] PCI: bus=0 devfn=0x09: vendor_id=0x8086 device_id=0x7010 class=0x0101
00001110200i[PIDE ] new BM-DMA address: 0xc000
00001110820i[BIOS ] region 4: 0x0000c000
00001112845i[BIOS ] PCI: bus=0 devfn=0x0b: vendor_id=0x8086 device_id=0x7113 class=0x0680
00001113075i[ACPI ] new irq line = 11
00001113090i[ACPI ] new irq line = 9
00001113115i[ACPI ] new PM base address: 0xb000
00001113130i[ACPI ] new SM base address: 0xb100
00001113160i[PCI  ] setting SMRAM control register to 0x4a
00001277250i[CPU0 ] Enter to System Management Mode
00001277260i[CPU0 ] RSM: Resuming from System Management Mode
00001441280i[PCI  ] setting SMRAM control register to 0x0a
00001456325i[BIOS ] MP table addr=0x000fa530 MPC table addr=0x000fa450 size=0xdc
00001458155i[BIOS ] SMBIOS table addr=0x000fa540
00001458215i[MEM0 ] allocate_block: block=0xff used 0x2 of 0x100
00001460445i[BIOS ] ACPI tables: RSDP addr=0x000fa690 ACPI DATA addr=0x0fff0000 size=0xf8a
00001463640i[BIOS ] Firmware waking vector 0xfff00cc
00001465520i[PCI  ] i440FX PMC write to PAM register 59 (TLB Flush)
00001466245i[BIOS ] bios_table_cur_addr: 0x000fa6b4
00001593865i[VBIOS] VGABios $Id: vgabios.c,v 1.75 2011/10/15 14:07:21 vruppert Exp $
00001596870i[VBIOS] VBE Bios $Id: vbe.c,v 1.64 2011/07/19 18:25:05 vruppert Exp $
00001935130i[BIOS ] ata0-0: PCHS=100/10/10 translation=none LCHS=100/10/10
00001988980i[BIOS ] ata0-1: PCHS=1000/1/1 translation=none LCHS=1000/1/1
00002000000i[XGUI ] charmap update. Font Height is 16
00031885255i[BIOS ] Booting from 0000:7c00
00031886985i[MEM0 ] allocate_block: block=0x1 used 0x3 of 0x100
00032202700i[MEM0 ] allocate_block: block=0x2 used 0x4 of 0x100
00032481485i[MEM0 ] allocate_block: block=0x3 used 0x5 of 0x100
00035346555i[APIC0] set timer divide factor to 1
00035349010e[SER  ] com1: write to tx hold register when not empty
00035350830e[SER  ] com1: write to tx hold register when not empty
00035352650e[SER  ] com1: write to tx hold register when not empty
00035354470e[SER  ] com1: write to tx hold register when not empty
00035360585i[APIC1] Deliver INIT IPI
00035360585i[CPU1 ] cpu software reset
00035360585i[APIC1] allocate APIC id=1 (MMIO enabled) to 0x0000fee00000
00035360585i[CPU1 ] CPU[1] is an application processor. Halting until SIPI.
00035360585i[CPU1 ] CPUID[0x00000000]: 00000005 756e6547 6c65746e 49656e69
00035360585i[CPU1 ] CPUID[0x00000001]: 00000633 01010800 00000008 1fcbfbff
00035360585i[CPU1 ] CPUID[0x00000002]: 00410601 00000000 00000000 00000000
00035360585i[CPU1 ] CPUID[0x00000003]: 00000000 00000000 00000000 00000000
00035360585i[CPU1 ] CPUID[0x00000004]: 00000000 00000000 00000000 00000000
00035360585i[CPU1 ] CPUID[0x00000005]: 00000040 00000040 00000003 00000020
00035360585i[CPU1 ] CPUID[0x80000000]: 80000008 00000000 00000000 00000000
00035360585i[CPU1 ] CPUID[0x80000001]: 00000000 00000000 00000000 00000000
00035360585i[CPU1 ] CPUID[0x80000002]: 20202020 20202020 20202020 6e492020
00035360585i[CPU1 ] CPUID[0x80000003]: 286c6574 50202952 69746e65 52286d75
00035360585i[CPU1 ] CPUID[0x80000004]: 20342029 20555043 20202020 00202020
00035360585i[CPU1 ] CPUID[0x80000005]: 01ff01ff 01ff01ff 40020140 40020140
00035360585i[CPU1 ] CPUID[0x80000006]: 00000000 42004200 02008140 00000000
00035360585i[CPU1 ] CPUID[0x80000007]: 00000000 00000000 00000000 00000000
00035360585i[CPU1 ] CPUID[0x80000008]: 00002028 00000000 00000000 00000000
00035360595i[APIC1] Deliver Start Up IPI
00035360595i[CPU1 ] CPU 1 started up at 0700:00000000 by APIC
00035360595i[APIC1] Deliver Start Up IPI
00035360595i[CPU1 ] CPU 1 started up by APIC, but was not halted at the time
00035360735i[APIC1] set timer divide factor to 1
00035363020e[SER  ] com1: write to tx hold register when not empty
00035365725e[SER  ] com1: write to tx hold register when not empty
00035367670e[SER  ] com1: write to tx hold register when not empty
00035369580e[SER  ] com1: write to tx hold register when not empty
00035371475e[SER  ] com1: write to tx hold register when not empty
00035374055e[SER  ] com1: write to tx hold register when not empty
00035375950e[SER  ] com1: write to tx hold register when not empty
00035377850e[SER  ] com1: write to tx hold register when not empty
00035379745e[SER  ] com1: write to tx hold register when not empty
00035382380e[SER  ] com1: write to tx hold register when not empty
00035384280e[SER  ] com1: write to tx hold register when not empty
00035386175e[SER  ] com1: write to tx hold register when not empty
00035388120e[SER  ] com1: write to tx hold register when not empty
00035389235i[MEM0 ] allocate_block: block=0x4 used 0x6 of 0x100
00035668015i[MEM0 ] allocate_block: block=0x5 used 0x7 of 0x100
00035946800i[MEM0 ] allocate_block: block=0x6 used 0x8 of 0x100
00036225585i[MEM0 ] allocate_block: block=0x7 used 0x9 of 0x100
00036504370i[MEM0 ] allocate_block: block=0x8 used 0xa of 0x100
00036783155i[MEM0 ] allocate_block: block=0x9 used 0xb of 0x100
00037061935i[MEM0 ] allocate_block: block=0xa used 0xc of 0x100
00037340720i[MEM0 ] allocate_block: block=0xb used 0xd of 0x100
00037619505i[MEM0 ] allocate_block: block=0xc used 0xe of 0x100
00037898290i[MEM0 ] allocate_block: block=0xd used 0xf of 0x100
00038177075i[MEM0 ] allocate_block: block=0xe used 0x10 of 0x100
00038455855i[MEM0 ] allocate_block: block=0xf used 0x11 of 0x100
00038734640i[MEM0 ] allocate_block: block=0x10 used 0x12 of 0x100
00039013425i[MEM0 ] allocate_block: block=0x11 used 0x13 of 0x100
00039292210i[MEM0 ] allocate_block: block=0x12 used 0x14 of 0x100
00039570995i[MEM0 ] allocate_block: block=0x13 used 0x15 of 0x100
00039849775i[MEM0 ] allocate_block: block=0x14 used 0x16 of 0x100
00040128560i[MEM0 ] allocate_block: block=0x15 used 0x17 of 0x100
00040407345i[MEM0 ] allocate_block: block=0x16 used 0x18 of 0x100
00040686130i[MEM0 ] allocate_block: block=0x17 used 0x19 of 0x100
00040964915i[MEM0 ] allocate_block: block=0x18 used 0x1a of 0x100
00041243695i[MEM0 ] allocate_block: block=0x19 used 0x1b of 0x100
00041522480i[MEM0 ] allocate_block: block=0x1a used 0x1c of 0x100
00041801265i[MEM0 ] allocate_block: block=0x1b used 0x1d of 0x100
00042080050i[MEM0 ] allocate_block: block=0x1c used 0x1e of 0x100
00042358835i[MEM0 ] allocate_block: block=0x1d used 0x1f of 0x100
00042637615i[MEM0 ] allocate_block: block=0x1e used 0x20 of 0x100
00042916400i[MEM0 ] allocate_block: block=0x1f used 0x21 of 0x100
00043195185i[MEM0 ] allocate_block: block=0x20 used 0x22 of 0x100
00043473970i[MEM0 ] allocate_block: block=0x21 used 0x23 of 0x100
00043752755i[MEM0 ] allocate_block: block=0x22 used 0x24 of 0x100
00044031535i[MEM0 ] allocate_block: block=0x23 used 0x25 of 0x100
00044310320i[MEM0 ] allocate_block: block=0x24 used 0x26 of 0x100
00044589105i[MEM0 ] allocate_block: block=0x25 used 0x27 of 0x100
00044867890i[MEM0 ] allocate_block: block=0x26 used 0x28 of 0x100
00045146675i[MEM0 ] allocate_block: block=0x27 used 0x29 of 0x100
00045425455i[MEM0 ] allocate_block: block=0x28 used 0x2a of 0x100
00045704240i[MEM0 ] allocate_block: block=0x29 used 0x2b of 0x100
00045983025i[MEM0 ] allocate_block: block=0x2a used 0x2c of 0x100
00046261810i[MEM0 ] allocate_block: block=0x2b used 0x2d of 0x100
00046540595i[MEM0 ] allocate_block: block=0x2c used 0x2e of 0x100
00046819375i[MEM0 ] allocate_block: block=0x2d used 0x2f of 0x100
00047098160i[MEM0 ] allocate_block: block=0x2e used 0x30 of 0x100
00047376945i[MEM0 ] allocate_block: block=0x2f used 0x31 of 0x100
00047655730i[MEM0 ] allocate_block: block=0x30 used 0x32 of 0x100
00047934515i[MEM0 ] allocate_block: block=0x31 used 0x33 of 0x100
00048213295i[MEM0 ] allocate_block: block=0x32 used 0x34 of 0x100
00048492080i[MEM0 ] allocate_block: block=0x33 used 0x35 of 0x100
00048770865i[MEM0 ] allocate_block: block=0x34 used 0x36 of 0x100
00049049650i[MEM0 ] allocate_block: block=0x35 used 0x37 of 0x100
00049328435i[MEM0 ] allocate_block: block=0x36 used 0x38 of 0x100
00049607215i[MEM0 ] allocate_block: block=0x37 used 0x39 of 0x100
00049886000i[MEM0 ] allocate_block: block=0x38 used 0x3a of 0x100
00050164785i[MEM0 ] allocate_block: block=0x39 used 0x3b of 0x100
00050443570i[MEM0 ] allocate_block: block=0x3a used 0x3c of 0x100
00050722355i[MEM0 ] allocate_block: block=0x3b used 0x3d of 0x100
00051001135i[MEM0 ] allocate_block: block=0x3c used 0x3e of 0x100
00051279920i[MEM0 ] allocate_block: block=0x3d used 0x3f of 0x100
00051558705i[MEM0 ] allocate_block: block=0x3e used 0x40 of 0x100
00051837490i[MEM0 ] allocate_block: block=0x3f used 0x41 of 0x100
00052116275i[MEM0 ] allocate_block: block=0x40 used 0x42 of 0x100
00052395055i[MEM0 ] allocate_block: block=0x41 used 0x43 of 0x100
00052673840i[MEM0 ] allocate_block: block=0x42 used 0x44 of 0x100
00052952625i[MEM0 ] allocate_block: block=0x43 used 0x45 of 0x100
00053231410i[MEM0 ] allocate_block: block=0x44 used 0x46 of 0x100
00053510195i[MEM0 ] allocate_block: block=0x45 used 0x47 of 0x100
00053788975i[MEM0 ] allocate_block: block=0x46 used 0x48 of 0x100
00054067760i[MEM0 ] allocate_block: block=0x47 used 0x49 of 0x100
00054346545i[MEM0 ] allocate_block: block=0x48 used 0x4a of 0x100
00054625330i[MEM0 ] allocate_block: block=0x49 used 0x4b of 0x100
00054904115i[MEM0 ] allocate_block: block=0x4a used 0x4c of 0x100
00055182895i[MEM0 ] allocate_block: block=0x4b used 0x4d of 0x100
00055461680i[MEM0 ] allocate_block: block=0x4c used 0x4e of 0x100
00055740465i[MEM0 ] allocate_block: block=0x4d used 0x4f of 0x100
00056019250i[MEM0 ] allocate_block: block=0x4e used 0x50 of 0x100
00056298035i[MEM0 ] allocate_block: block=0x4f used 0x51 of 0x100
00056576815i[MEM0 ] allocate_block: block=0x50 used 0x52 of 0x100
00056855600i[MEM0 ] allocate_block: block=0x51 used 0x53 of 0x100
00057134385i[MEM0 ] allocate_block: block=0x52 used 0x54 of 0x100
00057413170i[MEM0 ] allocate_block: block=0x53 used 0x55 of 0x100
00057691955i[MEM0 ] allocate_block: block=0x54 used 0x56 of 0x100
00057970735i[MEM0 ] allocate_block: block=0x55 used 0x57 of 0x100
00058249520i[MEM0 ] allocate_block: block=0x56 used 0x58 of 0x100
00058528305i[MEM0 ] allocate_block: block=0x57 used 0x59 of 0x100
00058807090i[MEM0 ] allocate_block: block=0x58 used 0x5a of 0x100
00059085875i[MEM0 ] allocate_block: block=0x59 used 0x5b of 0x100
00059364655i[MEM0 ] allocate_block: block=0x5a used 0x5c of 0x100
00059643440i[MEM0 ] allocate_block: block=0x5b used 0x5d of 0x100
00059922225i[MEM0 ] allocate_block: block=0x5c used 0x5e of 0x100
00060201010i[MEM0 ] allocate_block: block=0x5d used 0x5f of 0x100
00060479795i[MEM0 ] allocate_block: block=0x5e used 0x60 of 0x100
00060758575i[MEM0 ] allocate_block: block=0x5f used 0x61 of 0x100
00061037360i[MEM0 ] allocate_block: block=0x60 used 0x62 of 0x100
00061316145i[MEM0 ] allocate_block: block=0x61 used 0x63 of 0x100
00061594930i[MEM0 ] allocate_block: block=0x62 used 0x64 of 0x100
00061873715i[MEM0 ] allocate_block: block=0x63 used 0x65 of 0x100
00062152495i[MEM0 ] allocate_block: block=0x64 used 0x66 of 0x100
00062431280i[MEM0 ] allocate_block: block=0x65 used 0x67 of 0x100
00062710065i[MEM0 ] allocate_block: block=0x66 used 0x68 of 0x100
00062988850i[MEM0 ] allocate_block: block=0x67 used 0x69 of 0x100
00063267635i[MEM0 ] allocate_block: block=0x68 used 0x6a of 0x100
00063546415i[MEM0 ] allocate_block: block=0x69 used 0x6b of 0x100
00063825200i[MEM0 ] allocate_block: block=0x6a used 0x6c of 0x100
00064103985i[MEM0 ] allocate_block: block=0x6b used 0x6d of 0x100
00064382770i[MEM0 ] allocate_block: block=0x6c used 0x6e of 0x100
00064661555i[MEM0 ] allocate_block: block=0x6d used 0x6f of 0x100
00064940335i[MEM0 ] allocate_block: block=0x6e used 0x70 of 0x100
00065219120i[MEM0 ] allocate_block: block=0x6f used 0x71 of 0x100
00065497905i[MEM0 ] allocate_block: block=0x70 used 0x72 of 0x100
00065776690i[MEM0 ] allocate_block: block=0x71 used 0x73 of 0x100
00066055475i[MEM0 ] allocate_block: block=0x72 used 0x74 of 0x100
00066334255i[MEM0 ] allocate_block: block=0x73 used 0x75 of 0x100
00066613040i[MEM0 ] allocate_block: block=0x74 used 0x76 of 0x100
00066891825i[MEM0 ] allocate_block: block=0x75 used 0x77 of 0x100
00067170610i[MEM0 ] allocate_block: block=0x76 used 0x78 of 0x100
00067449395i[MEM0 ] allocate_block: block=0x77 used 0x79 of 0x100
00067728175i[MEM0 ] allocate_block: block=0x78 used 0x7a of 0x100
00068006960i[MEM0 ] allocate_block: block=0x79 used 0x7b of 0x100
00068285745i[MEM0 ] allocate_block: block=0x7a used 0x7c of 0x100
00068564530i[MEM0 ] allocate_block: block=0x7b used 0x7d of 0x100
00068843315i[MEM0 ] allocate_block: block=0x7c used 0x7e of 0x100
00069122095i[MEM0 ] allocate_block: block=0x7d used 0x7f of 0x100
00069400880i[MEM0 ] allocate_block: block=0x7e used 0x80 of 0x100
00069679665i[MEM0 ] allocate_block: block=0x7f used 0x81 of 0x100
00069958450i[MEM0 ] allocate_block: block=0x80 used 0x82 of 0x100
00070237235i[MEM0 ] allocate_block: block=0x81 used 0x83 of 0x100
00070516015i[MEM0 ] allocate_block: block=0x82 used 0x84 of 0x100
00070794800i[MEM0 ] allocate_block: block=0x83 used 0x85 of 0x100
00071073585i[MEM0 ] allocate_block: block=0x84 used 0x86 of 0x100
00071352370i[MEM0 ] allocate_block: block=0x85 used 0x87 of 0x100
00071631155i[MEM0 ] allocate_block: block=0x86 used 0x88 of 0x100
00071909935i[MEM0 ] allocate_block: block=0x87 used 0x89 of 0x100
00072188720i[MEM0 ] allocate_block: block=0x88 used 0x8a of 0x100
00072467505i[MEM0 ] allocate_block: block=0x89 used 0x8b of 0x100
00072746290i[MEM0 ] allocate_block: block=0x8a used 0x8c of 0x100
00073025075i[MEM0 ] allocate_block: block=0x8b used 0x8d of 0x100
00073303855i[MEM0 ] allocate_block: block=0x8c used 0x8e of 0x100
00073582640i[MEM0 ] allocate_block: block=0x8d used 0x8f of 0x100
00073861425i[MEM0 ] allocate_block: block=0x8e used 0x90 of 0x100
00074140210i[MEM0 ] allocate_block: block=0x8f used 0x91 of 0x100
00074418995i[MEM0 ] allocate_block: block=0x90 used 0x92 of 0x100
00074697775i[MEM0 ] allocate_block: block=0x91 used 0x93 of 0x100
00074976560i[MEM0 ] allocate_block: block=0x92 used 0x94 of 0x100
00075255345i[MEM0 ] allocate_block: block=0x93 used 0x95 of 0x100
00075534130i[MEM0 ] allocate_block: block=0x94 used 0x96 of 0x100
00075812915i[MEM0 ] allocate_block: block=0x95 used 0x97 of 0x100
00076091695i[MEM0 ] allocate_block: block=0x96 used 0x98 of 0x100
00076370480i[MEM0 ] allocate_block: block=0x97 used 0x99 of 0x100
00076649265i[MEM0 ] allocate_block: block=0x98 used 0x9a of 0x100
00076928050i[MEM0 ] allocate_block: block=0x99 used 0x9b of 0x100
00077206835i[MEM0 ] allocate_block: block=0x9a used 0x9c of 0x100
00077485615i[MEM0 ] allocate_block: block=0x9b used 0x9d of 0x100
00077764400i[MEM0 ] allocate_block: block=0x9c used 0x9e of 0x100
00078043185i[MEM0 ] allocate_block: block=0x9d used 0x9f of 0x100
00078321970i[MEM0 ] allocate_block: block=0x9e used 0xa0 of 0x100
00078600755i[MEM0 ] allocate_block: block=0x9f used 0xa1 of 0x100
00078879535i[MEM0 ] allocate_block: block=0xa0 used 0xa2 of 0x100
00079158320i[MEM0 ] allocate_block: block=0xa1 used 0xa3 of 0x100
00079437105i[MEM0 ] allocate_block: block=0xa2 used 0xa4 of 0x100
00079715890i[MEM0 ] allocate_block: block=0xa3 used 0xa5 of 0x100
00079994675i[MEM0 ] allocate_block: block=0xa4 used 0xa6 of 0x100
00080273455i[MEM0 ] allocate_block: block=0xa5 used 0xa7 of 0x100
00080552240i[MEM0 ] allocate_block: block=0xa6 used 0xa8 of 0x100
00080831025i[MEM0 ] allocate_block: block=0xa7 used 0xa9 of 0x100
00081109810i[MEM0 ] allocate_block: block=0xa8 used 0xaa of 0x100
00081388595i[MEM0 ] allocate_block: block=0xa9 used 0xab of 0x100
00081667375i[MEM0 ] allocate_block: block=0xaa used 0xac of 0x100
00081946160i[MEM0 ] allocate_block: block=0xab used 0xad of 0x100
00082224945i[MEM0 ] allocate_block: block=0xac used 0xae of 0x100
00082503730i[MEM0 ] allocate_block: block=0xad used 0xaf of 0x100
00082782515i[MEM0 ] allocate_block: block=0xae used 0xb0 of 0x100
00083061295i[MEM0 ] allocate_block: block=0xaf used 0xb1 of 0x100
00083340080i[MEM0 ] allocate_block: block=0xb0 used 0xb2 of 0x100
00083618865i[MEM0 ] allocate_block: block=0xb1 used 0xb3 of 0x100
00083897650i[MEM0 ] allocate_block: block=0xb2 used 0xb4 of 0x100
00084176435i[MEM0 ] allocate_block: block=0xb3 used 0xb5 of 0x100
00084455215i[MEM0 ] allocate_block: block=0xb4 used 0xb6 of 0x100
00084734000i[MEM0 ] allocate_block: block=0xb5 used 0xb7 of 0x100
00085012785i[MEM0 ] allocate_block: block=0xb6 used 0xb8 of 0x100
00085291570i[MEM0 ] allocate_block: block=0xb7 used 0xb9 of 0x100
00085570355i[MEM0 ] allocate_block: block=0xb8 used 0xba of 0x100
00085849135i[MEM0 ] allocate_block: block=0xb9 used 0xbb of 0x100
00086127920i[MEM0 ] allocate_block: block=0xba used 0xbc of 0x100
00086406705i[MEM0 ] allocate_block: block=0xbb used 0xbd of 0x100
00086685490i[MEM0 ] allocate_block: block=0xbc used 0xbe of 0x100
00086964275i[MEM0 ] allocate_block: block=0xbd used 0xbf of 0x100
00087243055i[MEM0 ] allocate_block: block=0xbe used 0xc0 of 0x100
00087521840i[MEM0 ] allocate_block: block=0xbf used 0xc1 of 0x100
00087800625i[MEM0 ] allocate_block: block=0xc0 used 0xc2 of 0x100
00088079410i[MEM0 ] allocate_block: block=0xc1 used 0xc3 of 0x100
00088358195i[MEM0 ] allocate_block: block=0xc2 used 0xc4 of 0x100
00088636975i[MEM0 ] allocate_block: block=0xc3 used 0xc5 of 0x100
00088915760i[MEM0 ] allocate_block: block=0xc4 used 0xc6 of 0x100
00089194545i[MEM0 ] allocate_block: block=0xc5 used 0xc7 of 0x100
00089473330i[MEM0 ] allocate_block: block=0xc6 used 0xc8 of 0x100
00089752115i[MEM0 ] allocate_block: block=0xc7 used 0xc9 of 0x100
00090030895i[MEM0 ] allocate_block: block=0xc8 used 0xca of 0x100
00090309680i[MEM0 ] allocate_block: block=0xc9 used 0xcb of 0x100
00090588465i[MEM0 ] allocate_block: block=0xca used 0xcc of 0x100
00090867250i[MEM0 ] allocate_block: block=0xcb used 0xcd of 0x100
00091146035i[MEM0 ] allocate_block: block=0xcc used 0xce of 0x100
00091424815i[MEM0 ] allocate_block: block=0xcd used 0xcf of 0x100
00091703600i[MEM0 ] allocate_block: block=0xce used 0xd0 of 0x100
00091982385i[MEM0 ] allocate_block: block=0xcf used 0xd1 of 0x100
00092261170i[MEM0 ] allocate_block: block=0xd0 used 0xd2 of 0x100
00092539955i[MEM0 ] allocate_block: block=0xd1 used 0xd3 of 0x100
00092818735i[MEM0 ] allocate_block: block=0xd2 used 0xd4 of 0x100
00093097520i[MEM0 ] allocate_block: block=0xd3 used 0xd5 of 0x100
00093376305i[MEM0 ] allocate_block: block=0xd4 used 0xd6 of 0x100
00093655090i[MEM0 ] allocate_block: block=0xd5 used 0xd7 of 0x100
00093933875i[MEM0 ] allocate_block: block=0xd6 used 0xd8 of 0x100
00094212655i[MEM0 ] allocate_block: block=0xd7 used 0xd9 of 0x100
00094491440i[MEM0 ] allocate_block: block=0xd8 used 0xda of 0x100
00094770225i[MEM0 ] allocate_block: block=0xd9 used 0xdb of 0x100
00095049010i[MEM0 ] allocate_block: block=0xda used 0xdc of 0x100
00095327795i[MEM0 ] allocate_block: block=0xdb used 0xdd of 0x100
00095606575i[MEM0 ] allocate_block: block=0xdc used 0xde of 0x100
00095885360i[MEM0 ] allocate_block: block=0xdd used 0xdf of 0x100
00096164145i[MEM0 ] allocate_block: block=0xde used 0xe0 of 0x100
00096442930i[MEM0 ] allocate_block: block=0xdf used 0xe1 of 0x100
00099254980e[SER  ] com1: write to tx hold register when not empty
00099256925e[SER  ] com1: write to tx hold register when not empty
00099258830e[SER  ] com1: write to tx hold register when not empty
00099260730e[SER  ] com1: write to tx hold register when not empty
00099263210e[SER  ] com1: write to tx hold register when not empty
00099265105e[SER  ] com1: write to tx hold register when not empty
00099267005e[SER  ] com1: write to tx hold register when not empty
00099268900e[SER  ] com1: write to tx hold register when not empty
00099271535e[SER  ] com1: write to tx hold register when not empty
00099273435e[SER  ] com1: write to tx hold register when not empty
00099275330e[SER  ] com1: write to tx hold register when not empty
00099277275e[SER  ] com1: write to tx hold register when not empty
00099280055e[SER  ] com1: write to tx hold register when not empty
00099281950e[SER  ] com1: write to tx hold register when not empty
00099283845e[SER  ] com1: write to tx hold register when not empty
00099285745e[SER  ] com1: write to tx hold register when not empty
00099288200e[SER  ] com1: write to tx hold register when not empty
00099290095e[SER  ] com1: write to tx hold register when not empty
00099291990e[SER  ] com1: write to tx hold register when not empty
00099293890e[SER  ] com1: write to tx hold register when not empty
00099296525e[SER  ] com1: write to tx hold register when not empty
00099298420e[SER  ] com1: write to tx hold register when not empty
00099300315e[SER  ] com1: write to tx hold register when not empty
00099302220e[SER  ] com1: write to tx hold register when not empty
00099304860e[SER  ] com1: write to tx hold register when not empty
00099306755e[SER  ] com1: write to tx hold register when not empty
00099308650e[SER  ] com1: write to tx hold register when not empty
00099310550e[SER  ] com1: write to tx hold register when not empty
00099313185e[SER  ] com1: write to tx hold register when not empty
00099315080e[SER  ] com1: write to tx hold register when not empty
00099317045e[SER  ] com1: write to tx hold register when not empty
00099318940e[SER  ] com1: write to tx hold register when not empty
00099321525e[SER  ] com1: write to tx hold register when not empty
00099323425e[SER  ] com1: write to tx hold register when not empty
00099325320e[SER  ] com1: write to tx hold register when not empty
00099327215e[SER  ] com1: write to tx hold register when not empty
00099329855e[SER  ] com1: write to tx hold register when not empty
00099331750e[SER  ] com1: write to tx hold register when not empty
00099333645e[SER  ] com1: write to tx hold register when not empty
00099335545e[SER  ] com1: write to tx hold register when not empty
00099338175e[SER  ] com1: write to tx hold register when not empty
00099340070e[SER  ] com1: write to tx hold register when not empty
00099341975e[SER  ] com1: write to tx hold register when not empty
00099343870e[SER  ] com1: write to tx hold register when not empty
00099346505e[SER  ] com1: write to tx hold register when not empty
00099348405e[SER  ] com1: write to tx hold register when not empty
00099350300e[SER  ] com1: write to tx hold register when not empty
00099352255e[SER  ] com1: write to tx hold register when not empty
00099354855e[SER  ] com1: write to tx hold register when not empty
00099356755e[SER  ] com1: write to tx hold register when not empty
00099358650e[SER  ] com1: write to tx hold register when not empty
00099360545e[SER  ] com1: write to tx hold register when not empty
00099363170e[SER  ] com1: write to tx hold register when not empty
00099365065e[SER  ] com1: write to tx hold register when not empty
00099366965e[SER  ] com1: write to tx hold register when not empty
00099368860e[SER  ] com1: write to tx hold register when not empty
00099371545e[SER  ] com1: write to tx hold register when not empty
00099373450e[SER  ] com1: write to tx hold register when not empty
00099375350e[SER  ] com1: write to tx hold register when not empty
00099377245e[SER  ] com1: write to tx hold register when not empty
00099379825e[SER  ] com1: write to tx hold register when not empty
00099381720e[SER  ] com1: write to tx hold register when not empty
00099383620e[SER  ] com1: write to tx hold register when not empty
00099385515e[SER  ] com1: write to tx hold register when not empty
00099388165e[SER  ] com1: write to tx hold register when not empty
00099390065e[SER  ] com1: write to tx hold register when not empty
00099391960e[SER  ] com1: write to tx hold register when not empty
00099393915e[SER  ] com1: write to tx hold register when not empty
00099396500e[SER  ] com1: write to tx hold register when not empty
00099398400e[SER  ] com1: write to tx hold register when not empty
00099400295e[SER  ] com1: write to tx hold register when not empty
00099402190e[SER  ] com1: write to tx hold register when not empty
00099404830e[SER  ] com1: write to tx hold register when not empty
00099406725e[SER  ] com1: write to tx hold register when not empty
00099408620e[SER  ] com1: write to tx hold register when not empty
00099410520e[SER  ] com1: write to tx hold register when not empty
00099413155e[SER  ] com1: write to tx hold register when not empty
00099415050e[SER  ] com1: write to tx hold register when not empty
00099417005e[SER  ] com1: write to tx hold register when not empty
00099418900e[SER  ] com1: write to tx hold register when not empty
00099421680e[SER  ] com1: write to tx hold register when not empty
00099423575e[SER  ] com1: write to tx hold register when not empty
00099425475e[SER  ] com1: write to tx hold register when not empty
00099427370e[SER  ] com1: write to tx hold register when not empty
00099429810e[SER  ] com1: write to tx hold register when not empty
00099431710e[SER  ] com1: write to tx hold register when not empty
00099433605e[SER  ] com1: write to tx hold register when not empty
00099435500e[SER  ] com1: write to tx hold register when not empty
00099438140e[SER  ] com1: write to tx hold register when not empty
00099440035e[SER  ] com1: write to tx hold register when not empty
00099441930e[SER  ] com1: write to tx hold register when not empty
00099443830e[SER  ] com1: write to tx hold register when not empty
00099446465e[SER  ] com1: write to tx hold register when not empty
00099448425e[SER  ] com1: write to tx hold register when not empty
00099450320e[SER  ] com1: write to tx hold register when not empty
00099452215e[SER  ] com1: write to tx hold register when not empty
00099454805e[SER  ] com1: write to tx hold register when not empty
00099456705e[SER  ] com1: write to tx hold register when not empty
00099458600e[SER  ] com1: write to tx hold register when not empty
00099460495e[SER  ] com1: write to tx hold register when not empty
00099463135e[SER  ] com1: write to tx hold register when not empty
00099465030e[SER  ] com1: write to tx hold register when not empty
00099466925e[SER  ] com1: write to tx hold register when not empty
00099468825e[SER  ] com1: write to tx hold register when not empty
00099471475e[SER  ] com1: write to tx hold register when not empty
00099473375e[SER  ] com1: write to tx hold register when not empty
00099475270e[SER  ] com1: write to tx hold register when not empty
00099477165e[SER  ] com1: write to tx hold register when not empty
00099479890e[SER  ] com1: write to tx hold register when not empty
00099481785e[SER  ] com1: write to tx hold register when not empty
00099483680e[SER  ] com1: write to tx hold register when not empty
00099485575e[SER  ] com1: write to tx hold register when not empty
00099488120e[SER  ] com1: write to tx hold register when not empty
00099490015e[SER  ] com1: write to tx hold register when not empty
00099491910e[SER  ] com1: write to tx hold register when not empty
00099493820e[SER  ] com1: write to tx hold register when not empty
00099496455e[SER  ] com1: write to tx hold register when not empty
00099498350e[SER  ] com1: write to tx hold register when not empty
00099500250e[SER  ] com1: write to tx hold register when not empty
00099502145e[SER  ] com1: write to tx hold register when not empty
00099504780e[SER  ] com1: write to tx hold register when not empty
00099506725e[SER  ] com1: write to tx hold register when not empty
00099508630e[SER  ] com1: write to tx hold register when not empty
00099510525e[SER  ] com1: write to tx hold register when not empty
00099531380e[SER  ] com1: write to tx hold register when not empty
00099533275e[SER  ] com1: write to tx hold register when not empty
00099535170e[SER  ] com1: write to tx hold register when not empty
00099537070e[SER  ] com1: write to tx hold register when not empty
00099539605e[SER  ] com1: write to tx hold register when not empty
00099541555e[SER  ] com1: write to tx hold register when not empty
00099543460e[SER  ] com1: write to tx hold register when not empty
00099545355e[SER  ] com1: write to tx hold register when not empty
00099547935e[SER  ] com1: write to tx hold register when not empty
00099549835e[SER  ] com1: write to tx hold register when not empty
00099551730e[SER  ] com1: write to tx hold register when not empty
00099553625e[SER  ] com1: write to tx hold register when not empty
00099556265e[SER  ] com1: write to tx hold register when not empty
00099558190e[SER  ] com1: write to tx hold register when not empty
00099560090e[SER  ] com1: write to tx hold register when not empty
00099561985e[SER  ] com1: write to tx hold register when not empty
00099564625e[SER  ] com1: write to tx hold register when not empty
00099585455e[SER  ] com1: write to tx hold register when not empty
00099587350e[SER  ] com1: write to tx hold register when not empty
00099589245e[SER  ] com1: write to tx hold register when not empty
00099591140e[SER  ] com1: write to tx hold register when not empty
00099593590e[SER  ] com1: write to tx hold register when not empty
00099595485e[SER  ] com1: write to tx hold register when not empty
00099597430e[SER  ] com1: write to tx hold register when not empty
00099599420e[SER  ] com1: write to tx hold register when not empty
00099601925e[SER  ] com1: write to tx hold register when not empty
00099603820e[SER  ] com1: write to tx hold register when not empty
00099605715e[SER  ] com1: write to tx hold register when not empty
00099607610e[SER  ] com1: write to tx hold register when not empty
00099610245e[SER  ] com1: write to tx hold register when not empty
00099612185e[SER  ] com1: write to tx hold register when not empty
00099614180e[SER  ] com1: write to tx hold register when not empty
00099616075e[SER  ] com1: write to tx hold register when not empty
00099618580e[SER  ] com1: write to tx hold register when not empty
00099620475e[SER  ] com1: write to tx hold register when not empty
00099622370e[SER  ] com1: write to tx hold register when not empty
00099624265e[SER  ] com1: write to tx hold register when not empty
00099626960e[SER  ] com1: write to tx hold register when not empty
00099628950e[SER  ] com1: write to tx hold register when not empty
00099630845e[SER  ] com1: write to tx hold register when not empty
00099632740e[SER  ] com1: write to tx hold register when not empty
00099635235e[SER  ] com1: write to tx hold register when not empty
00099637130e[SER  ] com1: write to tx hold register when not empty
00099639025e[SER  ] com1: write to tx hold register when not empty
00099640920e[SER  ] com1: write to tx hold register when not empty
00099643615e[SER  ] com1: write to tx hold register when not empty
00099645555e[SER  ] com1: write to tx hold register when not empty
00099647495e[SER  ] com1: write to tx hold register when not empty
00099649435e[SER  ] com1: write to tx hold register when not empty
00099651950e[SER  ] com1: write to tx hold register when not empty
00099653885e[SER  ] com1: write to tx hold register when not empty
00099655830e[SER  ] com1: write to tx hold register when not empty
00099657765e[SER  ] com1: write to tx hold register when not empty
00099660275e[SER  ] com1: write to tx hold register when not empty
00132650000p[XGUI ] >>PANIC<< POWER button turned off.
00132650000i[CPU0 ] CPU is in protected mode (active)
00132650000i[CPU0 ] CS.mode = 32 bit
00132650000i[CPU0 ] SS.mode = 32 bit
00132650000i[CPU0 ] EFER   = 0x00000000
00132650000i[CPU0 ] | EAX=00000000  EBX=8010b4bc  ECX=800b8ec0  EDX=000003d5
00132650000i[CPU0 ] | ESP=8010b48c  EBP=8010b4c4  ESI=8010b4bc  EDI=8010b510
00132650000i[CPU0 ] | IOPL=0 id vip vif ac vm rf nt of df if tf sf ZF af PF cf
00132650000i[CPU0 ] | SEG sltr(index|ti|rpl)     base    limit G D
00132650000i[CPU0 ] |  CS:0008( 0001| 0|  0) 00000000 ffffffff 1 1
00132650000i[CPU0 ] |  DS:0010( 0002| 0|  0) 00000000 ffffffff 1 1
00132650000i[CPU0 ] |  SS:0010( 0002| 0|  0) 00000000 ffffffff 1 1
00132650000i[CPU0 ] |  ES:0010( 0002| 0|  0) 00000000 ffffffff 1 1
00132650000i[CPU0 ] |  FS:0000( 0000| 0|  0) 00000000 00000000 0 0
00132650000i[CPU0 ] |  GS:0000( 0000| 0|  0) 00000000 00000000 0 0
00132650000i[CPU0 ] | EIP=801003e3 (801003e3)
00132650000i[CPU0 ] | CR0=0xe0010011 CR2=0x00000000
00132650000i[CPU0 ] | CR3=0x003ff000 CR4=0x00000010
00132650000i[CPU1 ] CPU is in protected mode (active)
00132650000i[CPU1 ] CS.mode = 32 bit
00132650000i[CPU1 ] SS.mode = 32 bit
00132650000i[CPU1 ] EFER   = 0x00000000
00132650000i[CPU1 ] | EAX=00000069  EBX=00002f9b  ECX=8010a52c  EDX=00000001
00132650000i[CPU1 ] | ESP=8dfffecc  EBP=8dfffee8  ESI=00000001  EDI=00002f9b
00132650000i[CPU1 ] | IOPL=0 id vip vif ac vm rf nt of df if tf sf zf af pf cf
00132650000i[CPU1 ] | SEG sltr(index|ti|rpl)     base    limit G D
00132650000i[CPU1 ] |  CS:0008( 0001| 0|  0) 00000000 ffffffff 1 1
00132650000i[CPU1 ] |  DS:0010( 0002| 0|  0) 00000000 ffffffff 1 1
00132650000i[CPU1 ] |  SS:0010( 0002| 0|  0) 00000000 ffffffff 1 1
00132650000i[CPU1 ] |  ES:0010( 0002| 0|  0) 00000000 ffffffff 1 1
00132650000i[CPU1 ] |  FS:0000( 0000| 0|  0) 00000000 00000000 0 0
00132650000i[CPU1 ] |  GS:0000( 0000| 0|  0) 00000000 00000000 0 0
00132650000i[CPU1 ] | EIP=801003fb (801003fb)
00132650000i[CPU1 ] | CR0=0xe0010011 CR2=0x00000000
00132650000i[CPU1 ] | CR3=0x0dfbb000 CR4=0x00000010
00132650000i[CMOS ] Last time is 1520210916 (Mon Mar  5 08:48:36 2018)
00132650000i[XGUI ] Exit
00132650000i[CTRL ] quit_sim called with exit code 1
